version: "3.7"

services:
  trino:
    image: trinodb/trino:latest
    deploy:
      mode: replicated
      replicas: 1
    container_name: trino
    platform: linux/amd64
    hostname: trino
    volumes:
      - ./coordinator-config:/etc/trino
      - trino-data:/etc/trino
    ports:
      - "8080:8080"
    networks:
      - trino-network
    depends_on:
      - minio
    environment:
      - NODE_ENV=development
      - NODE_ID=coordinator
      - DATA_DIR=/data/trino

  minio:
    image: quay.io/minio/minio
    container_name: minio
    platform: linux/amd64
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - trino-network

  mc:
    image: minio/mc
    container_name: minio-mc
    platform: linux/amd64
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      while ! /usr/bin/mc alias set local http://minio:9000 admin password > /dev/null 2>&1; do
        sleep 3;
      done;
      echo 'MinIO is ready!';
      if ! /usr/bin/mc ls local/trino-bucket > /dev/null 2>&1; then
        /usr/bin/mc mb local/trino-bucket;
        /usr/bin/mc policy set public local/trino-bucket;
      else
        echo 'Bucket already exists, skipping creation.';
      fi;
      echo 'MinIO Client is now running...';
      tail -f /dev/null;
      "
    networks:
      - trino-network
  
  streaming-job:
    build:
      context: ./app-streaming
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: streaming-job
    depends_on:
      - minio
    networks:
      - trino-network
  
  etl-job:
    build:
      context: ./app-etl
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: etl-job
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trino-network
  
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: warehouse
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - minio
    networks:
      - trino-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d warehouse"]
      interval: 10s
      timeout: 5s
      retries: 5  
      start_period: 15s 

networks:
  trino-network:
    driver: bridge

volumes:
  trino-data:
  minio_data:
  pg_data:
